#! /usr/bin/env python
# -*- coding: utf-8 -*-

from QcloudApi.modules import base


class QcloudApi(object):
    def __init__(self, module, config):
        self.module = module
        self.config = config

    def _factory(self, module, config):
        if (module == 'cdb'):
            from .modules.cdb import Cdb
            return Cdb(config)
        elif module == 'account':
            from .modules.account import Account
            return Account(config)
        elif module == 'cvm':
            from .modules.cvm import Cvm
            return Cvm(config)
        elif module == 'image':
            from .modules.image import Image
            return Image(config)
        elif module == 'lb':
            from .modules.lb import Lb
            return Lb(config)
        elif module == 'sec':
            from .modules.sec import Sec
            return Sec(config)
        elif module == 'trade':
            from .modules.trade import Trade
            return Trade(config)
        elif module == 'bill':
            from .modules.bill import Bill
            return Bill(config)
        elif module == 'monitor':
            from .modules.monitor import Monitor
            return Monitor(config)
        elif module == 'cdn':
            from .modules.cdn import Cdn
            return Cdn(config)
        elif module == 'vpc':
            from .modules.vpc import Vpc
            return Vpc(config)
        elif module == 'vod':
            from .modules.vod import Vod
            return Vod(config)
        elif module == 'yunsou':
            from .modules.yunsou import Yunsou
            return Yunsou(config)
        elif module == 'wenzhi':
            from .modules.wenzhi import Wenzhi
            return Wenzhi(config)
        elif module == 'market':
            from .modules.market import Market
            return Market(config)
        elif module == 'live':
            from .modules.live import Live
            return Live(config)
        elif module == 'eip':
            from .modules.eip import Eip
            return Eip(config)
        elif module == 'cbs':
            from .modules.cbs import Cbs
            return Cbs(config)
        elif module == 'snapshot':
            from .modules.snapshot import Snapshot
            return Snapshot(config)
        elif module == 'scaling':
            from .modules.scaling import Scaling
            return Scaling(config)
        elif module == 'cmem':
            from .modules.cmem import Cmem
            return Cmem(config)
        elif module == 'tdsql':
            from .modules.tdsql import Tdsql
            return Tdsql(config)
        elif module == 'bm':
            from .modules.bm import Bm
            return Bm(config)
        elif module == 'bmlb':
            from .modules.bmlb import Bmlb
            return Bmlb(config)
        elif module == 'redis':
            from .modules.redis import Redis
            return Redis(config)
        elif module == 'dfw':
            from .modules.dfw import Dfw
            return Dfw(config)
        elif module == 'ccs':
            from .modules.ccs import Ccs
            return Ccs(config)
        elif module == 'feecenter':
            from .modules.feecenter import Feecenter
            return Feecenter(config)
        elif module == 'cns':
            from .modules.cns import Cns
            return Cns(config)
        elif module == 'bmeip':
            from .modules.bmeip import Bmeip
            return Bmeip(config)
        elif module == 'bmvpc':
            from .modules.bmvpc import Bmvpc
            return Bmvpc(config)
        elif module == 'bgpip':
            from .modules.bgpip import Bgpip
            return Bgpip(config)
        elif module == 'scf':
            from .modules.scf import Scf
            return Scf(config)
        elif module == 'apigateway':
            from .modules.apigateway import APIGateway
            return APIGateway(config)
        elif module == 'batch':
            from .modules.batch import Batch
            return Batch(config)
        elif module == 'cloudaudit':
            from .modules.cloudaudit import CloudAudit
            return CloudAudit(config)
        elif module == 'tmt':
            from .modules.tmt import Tmt
            return Tmt(config)
        elif module == 'partners':
            from .modules.partners import Partners
            return Partners(config)
        elif module == 'tbaas':
            from .modules.tbaas import Tbaas
            return Tbaas(config)
        elif module == 'athena':
            from .modules.athena import Athena
            return Athena(config)
        elif module == 'emr':
            from .modules.emr import Emr
            return Emr(config)
        elif module == 'sts':
            from .modules.sts import Sts
            return Sts(config)
        elif module == 'ccr':
            from .modules.ccr import Ccr
            return Ccr(config)
        elif module == 'dc':
            from .modules.dc import Dc
            return Dc(config)
        else:
            config.setdefault("endpoint", module + '.api.qcloud.com')
            return base.Base(config)

    def setSecretId(self, secretId):
        self.config['secretId'] = secretId

    def setSecretKey(self, secretKey):
        self.config['secretKey'] = secretKey

    def setRequestMethod(self, method):
        self.config['method'] = method

    def setRegion(self, region):
        self.config['Region'] = region

    def setSignatureMethod(self, SignatureMethod):
        self.config['SignatureMethod'] = SignatureMethod

    def generateUrl(self, action, params):
        service = self._factory(self.module, self.config)
        return service.generateUrl(action, params)

    def call(self, action, params, req_timeout=None, debug=False):
        """
        @type action: string
        @param action: action interface

        @type params: dict
        @param params: interface parameters

        @type req_timeout: int
        @param req_timeout: request timeout(seconds)

        @type debug: bool
        @param debug: debug switch
        """
        service = self._factory(self.module, self.config)
        if req_timeout is not None:
            service.set_req_timeout(req_timeout)
        if debug:
            service.open_debug()

        methods = dir(service)
        for method in methods:
            if (method == action):
                func = getattr(service, action)
                return func(params)

        return service.call(action, params)
